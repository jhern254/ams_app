# App Progress Note file
TODO: 
* Add exception handling(asserts, try/catch)
* Add tests - even some small ones
* Work on code coverage
* HERE: ****************
    Have new clean pfr_db data. Upload to db and update constraints on pfr_staging
    Delete tables and rerun w/ new constraints

* Gitignore this file. The reason it doesn't work is because it's already 
    committed. Need to delete this then recommit? Meh, just rename cp dev.txt

Road Map:
* Connect R to db
    * Show staging_pfr on PFR screen
* Fix db view and insert data from staging table, get data to db tables
    * Write views. Make sure PFR, PFR Summary, Port. Details Views work.
        Then write other ones I can't test, like expenses, etc.
    * Connect app to view instead of staging table, utilize query
    * Make insert trigger, then update, delete later
* Add data cleaning pipeline to insert csv
    * Add unit tests(some already written)
    * Add edge cases (if time)
* Write common queries tab (PFR ONLY)
    * How to see in app? Drop down then listing? 
    Switch(query1, query2, ...)
    Output
    ?
    Actually, this might be a good idea to have a test tab for queries anyway

* Dynamic UI page, portfolio details and PI port., financial sheet




------------------------------------------------------------------------------
------------------------------------------------------------------------------
General: 
* UI will have many screens w/ unique fns for now. When the app is more
    along development, may combine screens/refactor UI. 
* Need undo button
* Make font cleaner, easier to read. Maybe custom? 


------------------------------------------------------------------------------
------------------------------------------------------------------------------
Design Decisions:
* TODO: Have to figure out how to fix 8: replacing previous import 
                    ‘bs4Dash::column’ by ‘shiny::column’ when loading ‘ams’
    Do I need to put bs4Dash in a name scope? No, makes no sense.
    So I can try to put @import bs4Dash in the right space?
    Figure out.

* So, for naming conventions, I like rewriting parts of the bs4Dash fns, 
    to include a menu. Ex: bs4Dash::tabItems() will have my fn 
    tabItems_menu, which splits up to the next layer, which is encapsulated,
    then you can start the new code w/ the next layer of fns, which here is 
    tabItem(), but the developer user doesn't have to know that. 
    module(tabItems_menu) => mod_tabItems_menu, which splits into 
    mod_tabItems_menu_ui and mod_tabItems_menu_server.
    - Update: doesn't work

* Going to make pfr_df var that sets up temporary test data, that I can 
    turn into a rhandsontable object. This can be called throughout 
    whole package since this is a module. Name it pfr_df, employee_df, ...,
    and the file pfr_data, personnel_data, with a bool/fn for test data,
    where I'll input and make random values.

* Idk where to put server fn for the modules. How do I run this in app?
    After a lot of golem testing and trying to figure out how package
    modules work, I have no clue. Idk how module files get read, so
    I will have to study how to use modules within modules, or follow a simple
    structure. I cannot be too advanced unless I really understand R packages.

* After a bit of testing, the api layer works, but is not good design. I am 
    combining two layers of abstraction, the bs4Dash UI and the pages. It's
    better to have pages abstracted away from the api layer, but this would
    mean to have 3 overall layers of abstraction. This might not be the best
    choice atm. So I can have a single layer(main) of app ui/server, with 
    bs4Dash, and each individual page, maybe a fluidRow, or bs4Dash::tabItem().

* Refactor so app_ui/server are main bs4Dash interface. Then figure out
    how to have temp dataset/df. Maybe w/ fn? In /R, this should be visible to
    whole dir. to use, no?
    * NOTE: Using temp df within server fns for now. Not good practice.

* Going to keep mod_sidebarMenu for now, just in case I can abstract this away.
    The only thing to keep in mind is using the input$id for sidebarMenu
    to updateTabeItems(), which I will need reactivity to update the tab
    for portfolio template view.

* HERE: Turn fluidRows in pfr_screen to Boxes. Read boxes docs on bs4Dash.

* May not use rhandsontable anymore. Just simple bugs that deter me. 
    Will see if DTEdit is ok, or a custom DT w/ input modals.
    Update: Found https://github.com/DavidPatShuiFong/DTedit
    LGTM - have to check if works well w/ bs4Dash. 
    Other option is custom DT w/ CRUD models, see DT RStudio docs

* Added README

------------------------------------------------------------------------------
------------------------------------------------------------------------------
PFR Screen
* Add boxes
* Add search for proj., and start dates?
* HERE: Going to add in data cleaning backend functionality. 
    With this, I'm going to have TEMP code to replace data frame w/ 
    csv uploaded df, just to see if data cleaning pipeline works. This is temp,
    since the csv will go thru pipeline, then straight to db, since
    SQL db handles INSERTS, UPDATES, and DELETES better than writing in R.
    Can try this w/ a DEBUG if statement, if (DEBUG_csv) then dtedit(csv_df)


BUGS:
* HERE: Try datatable.call in docs for styling
------------------------------------------------------------------------------
------------------------------------------------------------------------------
Department Portolio Screen
* HERE: Have to figure out how to have updateTab value to pass one level up
    to update the Project PI tab/screen when a PI is selected on this screen.


------------------------------------------------------------------------------
------------------------------------------------------------------------------

BUGS:
* You have to remove in NAMESPACE the @import if you accidentally typod. 
    Just delete it and rerun roxygen2 package check when running.

* After much testing, I'm not really sure how roxy2 uses @import. Does it 
    only work on the /R dir? After testing, maybe only module files?

* Tried to make test dev scripts, doesn't work. Idk how module files
    even get read by app_ui and app_server, nor how to test them.




